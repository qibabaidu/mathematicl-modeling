#include <cstdio>
#include <glpk.h>

int main(){
initialize:
    glp_prob *lp;
    lp = glp_create_prob();
    glp_set_obj_dir(lp, GLP_MIN);

auxiliary_varibales_rows:
    glp_add_rows(lp, 2);
    glp_set_row_name(lp, 1, "p");
    glp_set_row_bnds(lp, 1, GLP_LO, 8.00, 0.0);
    glp_set_row_name(lp, 2, "q");
    glp_set_row_bnds(lp, 2, GLP_LO, 6.00, 0.0);

variables_columns:
    glp_add_cols(lp, 3);
    glp_set_col_name(lp, 1, "x1");
    glp_set_col_bnds(lp, 1, GLP_LO, 0.0, 0.0);
    glp_set_col_name(lp, 2, "x2");
    glp_set_col_bnds(lp, 2, GLP_LO, 0.0, 0.0);
    glp_set_col_name(lp, 3, "x3");
    glp_set_col_bnds(lp, 3, GLP_LO, 0.0, 0.0);

to_minimize:
    glp_set_obj_coef(lp, 1, 2.0);
    glp_set_obj_coef(lp, 2, 3.0);
    glp_set_obj_coef(lp, 3, 1.0);

constrant_matrix:
    int ia[7], ja[7];
    double ar[7];
    ia[1]=1, ja[1]=1, ar[1]=1;
    ia[2]=1, ja[2]=2, ar[2]=4;
    ia[3]=1, ja[3]=3, ar[3]=2;
    ia[4]=2, ja[4]=1, ar[4]=3;
    ia[5]=2, ja[5]=2, ar[5]=2;
    ia[6]=2, ja[6]=3, ar[6]=0;
    glp_load_matrix(lp, 6, ia, ja, ar);

calculate:
    glp_simplex(lp, NULL);

output:
    double z, x1, x2, x3;
    z=glp_get_obj_val(lp);
    x1=glp_get_col_prim(lp, 1);
    x2=glp_get_col_prim(lp, 2);
    x3=glp_get_col_prim(lp, 3);

    printf("z = %lf, x1 = %lf, x2 = %lf, x3 = %lf\n", z, x1, x2, x3);

cleanup:
    glp_delete_prob(lp);

    return 0;
}
